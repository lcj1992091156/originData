<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yuchen.data.mapper.neo4j.ProtegeMapper">
<!--    &#45;&#45;     create( protege:protege{ name:${protege.name} ,age:${protege.dataType} , strId: ${protege.strId} })-->
    <insert id ="add"   keyProperty="id" >
   CREATE (p:protege { name: #{protege.name},uuid:#{protege.strId},dataType:#{protege.dataType},parentNode:#{protege.parentNode} })
    </insert>

    <select id="selectById"  resultMap="protegeMap">
	match
		  (u:protege)
		where
		  id(u) = #{id}
		return
          u.id as id,u.name as name,u.dataType as dataType ,u.uuid as uuId, u.id=id
    </select>

    <select id="selectByIdCount" resultType="java.lang.Integer">
	    match
		  (u:protege)
		where
		  id(u) = #{id}
		return
         COUNT(1)
    </select>
    <select id="selectAll" resultMap="protegeMap">

  MATCH (n:protege)
  <where>
      n.dataType='class'
      <if test="entity.parentNode==true">
          and n.parentNode = true
      </if>
      <if test="entity.name !=null and entity.name !=''">
         AND n.name =~ #{entity.name}
      </if>
  </where>

  return id(n) as  id,n.dataType as dataType,n.name as name,n.parentNode as parentNode,n.uuid as strId
    </select>

    <select id="selectAllSon" resultMap="protegeMap">

  MATCH (n:protege)-[r:son{relationship:"son"}]->(m:protege) where n.uuid=#{entity.uuid}
  return id(m) as  id,m.dataType as dataType,m.name as name,m.parentNode as parentNode,m.uuid as strId
    </select>

    <!-- 自定义结果集-->
    <resultMap id="protegeMap" type="com.yuchen.data.model.Protege">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="dataType" column="dataType"/>
        <result property="strId" column="strId"/>
        <result property="parentNode" column="parentNode"/>
    </resultMap>



    <insert id="addRelationship">
        MATCH (p:protege),(m:protege)
        where  id(p)=#{entity.id} AND  m.uuid =#{entity.tagId}
        CREATE
        (p)-[r:son{relationship:#{entity.relationship} }
        ]->(m)
        RETURN r

    </insert>


</mapper>
